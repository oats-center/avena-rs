// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod sampler {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum ScanOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Scan<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Scan<'a> {
  type Inner = Scan<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> Scan<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_VALUES: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Scan { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScanArgs<'args>
  ) -> flatbuffers::WIPOffset<Scan<'bldr>> {
    let mut builder = ScanBuilder::new(_fbb);
    if let Some(x) = args.values { builder.add_values(x); }
    if let Some(x) = args.timestamp { builder.add_timestamp(x); }
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Scan::VT_TIMESTAMP, None)}
  }
  #[inline]
  pub fn values(&self) -> Option<flatbuffers::Vector<'a, f64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f64>>>(Scan::VT_VALUES, None)}
  }
}

impl flatbuffers::Verifiable for Scan<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f64>>>("values", Self::VT_VALUES, false)?
     .finish();
    Ok(())
  }
}
pub struct ScanArgs<'a> {
    pub timestamp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub values: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f64>>>,
}
impl<'a> Default for ScanArgs<'a> {
  #[inline]
  fn default() -> Self {
    ScanArgs {
      timestamp: None,
      values: None,
    }
  }
}

pub struct ScanBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScanBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Scan::VT_TIMESTAMP, timestamp);
  }
  #[inline]
  pub fn add_values(&mut self, values: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Scan::VT_VALUES, values);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScanBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScanBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Scan<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Scan<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Scan");
      ds.field("timestamp", &self.timestamp());
      ds.field("values", &self.values());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Scan`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_scan_unchecked`.
pub fn root_as_scan(buf: &[u8]) -> Result<Scan, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Scan>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Scan` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_scan_unchecked`.
pub fn size_prefixed_root_as_scan(buf: &[u8]) -> Result<Scan, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Scan>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Scan` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_scan_unchecked`.
pub fn root_as_scan_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Scan<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Scan<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Scan` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_scan_unchecked`.
pub fn size_prefixed_root_as_scan_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Scan<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Scan<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Scan and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Scan`.
pub unsafe fn root_as_scan_unchecked(buf: &[u8]) -> Scan {
  unsafe { flatbuffers::root_unchecked::<Scan>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Scan and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Scan`.
pub unsafe fn size_prefixed_root_as_scan_unchecked(buf: &[u8]) -> Scan {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Scan>(buf) }
}
#[inline]
pub fn finish_scan_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Scan<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_scan_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Scan<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod sampler

